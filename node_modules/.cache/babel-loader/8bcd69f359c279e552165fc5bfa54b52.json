{"ast":null,"code":"var _jsxFileName = \"/home/roman/Documents/development/projects/second_the-worst-online-mobile-phone-store/src/components/common/DevicePage.js\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Image, Skeleton } from \"antd\";\nimport { connect } from \"react-redux\";\nimport SelectColor from \"./device_page/SelectColor\";\nimport SelectMemory from \"./device_page/SelectMemory\";\nimport ImageCarouselDevice from \"./device_page/ImageCarouselDevice\";\nimport CharacteristicsTable from \"./device_page/CharacteristicsTable\";\nimport iphone11ProMaxImg from \"../../img/iphone_11_pro_max.jpg\";\nimport \"./DevicePage.css\";\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\nimport { Radio } from \"antd\";\nimport { addCurrentDevice, deleteCurrentDevice } from \"../../redux/actions/devicePageActions\";\n\nfunction DevicePage(props) {\n  // const [value, setValue] = useState(0);\n  // const [color, setColor] = useState(\"\");\n  const [cssClass, setCssClass] = useState(\"secondary-container-0\");\n\n  function getArrSameTypesOfDevices() {\n    const arrCurrentDevice = props.location.pathname.split(\"/\");\n    const arrTheSameTypesOfDevices = props.theReduxStore[arrCurrentDevice[1]][arrCurrentDevice[2]];\n    return arrTheSameTypesOfDevices;\n  }\n\n  const theSameTypesOfDevices = getArrSameTypesOfDevices();\n\n  function getCurrentDevice() {\n    // const arrCurrentDevice = props.location.pathname.split(\"/\");\n    // const arrTheSameDevices =\n    //   props.theReduxStore[arrCurrentDevice[1]][arrCurrentDevice[2]];\n    const objCurrentDevice = theSameTypesOfDevices.find(item => item.url === props.match.params.urlName);\n    return objCurrentDevice;\n  }\n\n  const _currentDevice = getCurrentDevice();\n\n  const reallyTheSameDevices = theSameTypesOfDevices.filter(item => item.title === props.theReduxStore.currentDevice.title);\n  const availableColors = [...new Set(reallyTheSameDevices.map(i => i.color))];\n  const arrOfAvailableMemoryDevice = [...new Set(reallyTheSameDevices.map(i => i.memory))];\n  useEffect(function () {\n    if (_currentDevice) props.dispatch(addCurrentDevice(_currentDevice));\n    return () => props.dispatch(deleteCurrentDevice(_currentDevice));\n  }, [_currentDevice]);\n\n  function getUrlsImages() {\n    const arr = [];\n\n    for (const key in props.currentDevice) {\n      if (key.startsWith(\"image\")) {\n        arr.push(props.currentDevice[key]);\n      }\n    }\n\n    return arr;\n  }\n\n  const urlsImages = getUrlsImages();\n\n  function getObjUrlsImages() {\n    let obj = {};\n\n    for (const key in props.currentDevice) {\n      if (key.startsWith(\"image\")) {\n        obj = { ...obj,\n          [key]: props.currentDevice[key]\n        };\n      }\n    }\n\n    return obj;\n  }\n\n  const objUrlsImages = getObjUrlsImages();\n\n  function onChange(e) {\n    const nextDevice = reallyTheSameDevices.find(item => parseInt(item.memory, 10) === e.target.value && item.color === props.currentDevice.color);\n    const nextUrl = props.location.pathname.replace(props.match.params.urlName, nextDevice.url); // console.log(nextUrl);\n\n    props.history.push(nextUrl); // console.log(\"radio checked\", e.target.value);\n    // setValue(e.target.value);\n  }\n\n  function handleChangeColor(e) {\n    const nextDevice = reallyTheSameDevices.find(item => item.color === e.target.value && item.memory === props.theReduxStore.currentDevice.memory);\n    const nextUrl = props.location.pathname.replace(props.match.params.urlName, nextDevice.url);\n    props.history.push(nextUrl);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      marginLeft: \"5%\",\n      marginTop: \"3%\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ImageCarouselDevice, {\n    objUrlsImages: objUrlsImages,\n    arrUrlsImages: urlsImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      marginLeft: \"3%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, props.currentDevice.title + props.currentDevice.memory + props.currentDevice.color), /*#__PURE__*/React.createElement(SelectMemory, {\n    onChange: onChange,\n    currentMemory: parseInt(props.currentDevice.memory),\n    availableMemory: arrOfAvailableMemoryDevice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SelectColor, {\n    availableColors: availableColors,\n    currentDeviceColor: props.currentDevice.color,\n    onChangeColor: handleChangeColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CharacteristicsTable, {\n    currentDevice: props.currentDevice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    theReduxStore: state,\n    currentDevice: state.currentDevice\n  };\n}\n\nexport default connect(mapStateToProps)(DevicePage);","map":{"version":3,"sources":["/home/roman/Documents/development/projects/second_the-worst-online-mobile-phone-store/src/components/common/DevicePage.js"],"names":["React","useState","useEffect","Image","Skeleton","connect","SelectColor","SelectMemory","ImageCarouselDevice","CharacteristicsTable","iphone11ProMaxImg","LeftOutlined","RightOutlined","Radio","addCurrentDevice","deleteCurrentDevice","DevicePage","props","cssClass","setCssClass","getArrSameTypesOfDevices","arrCurrentDevice","location","pathname","split","arrTheSameTypesOfDevices","theReduxStore","theSameTypesOfDevices","getCurrentDevice","objCurrentDevice","find","item","url","match","params","urlName","_currentDevice","reallyTheSameDevices","filter","title","currentDevice","availableColors","Set","map","i","color","arrOfAvailableMemoryDevice","memory","dispatch","getUrlsImages","arr","key","startsWith","push","urlsImages","getObjUrlsImages","obj","objUrlsImages","onChange","e","nextDevice","parseInt","target","value","nextUrl","replace","history","handleChangeColor","display","marginLeft","marginTop","alignItems","flexDirection","mapStateToProps","state","ownProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Image, Skeleton } from \"antd\";\nimport { connect } from \"react-redux\";\nimport SelectColor from \"./device_page/SelectColor\";\nimport SelectMemory from \"./device_page/SelectMemory\";\nimport ImageCarouselDevice from \"./device_page/ImageCarouselDevice\";\nimport CharacteristicsTable from \"./device_page/CharacteristicsTable\";\n\nimport iphone11ProMaxImg from \"../../img/iphone_11_pro_max.jpg\";\nimport \"./DevicePage.css\";\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\nimport { Radio } from \"antd\";\n\nimport {\n  addCurrentDevice,\n  deleteCurrentDevice,\n} from \"../../redux/actions/devicePageActions\";\n\nfunction DevicePage(props) {\n  // const [value, setValue] = useState(0);\n  // const [color, setColor] = useState(\"\");\n  const [cssClass, setCssClass] = useState(\"secondary-container-0\");\n\n  function getArrSameTypesOfDevices() {\n    const arrCurrentDevice = props.location.pathname.split(\"/\");\n    const arrTheSameTypesOfDevices =\n      props.theReduxStore[arrCurrentDevice[1]][arrCurrentDevice[2]];\n    return arrTheSameTypesOfDevices;\n  }\n  const theSameTypesOfDevices = getArrSameTypesOfDevices();\n\n  function getCurrentDevice() {\n    // const arrCurrentDevice = props.location.pathname.split(\"/\");\n    // const arrTheSameDevices =\n    //   props.theReduxStore[arrCurrentDevice[1]][arrCurrentDevice[2]];\n    const objCurrentDevice = theSameTypesOfDevices.find(\n      (item) => item.url === props.match.params.urlName\n    );\n    return objCurrentDevice;\n  }\n  const _currentDevice = getCurrentDevice();\n\n  const reallyTheSameDevices = theSameTypesOfDevices.filter(\n    (item) => item.title === props.theReduxStore.currentDevice.title\n  );\n\n  const availableColors = [\n    ...new Set(reallyTheSameDevices.map((i) => i.color)),\n  ];\n\n  const arrOfAvailableMemoryDevice = [\n    ...new Set(reallyTheSameDevices.map((i) => i.memory)),\n  ];\n\n  useEffect(\n    function () {\n      if (_currentDevice) props.dispatch(addCurrentDevice(_currentDevice));\n      return () => props.dispatch(deleteCurrentDevice(_currentDevice));\n    },\n    [_currentDevice]\n  );\n\n  function getUrlsImages() {\n    const arr = [];\n    for (const key in props.currentDevice) {\n      if (key.startsWith(\"image\")) {\n        arr.push(props.currentDevice[key]);\n      }\n    }\n    return arr;\n  }\n  const urlsImages = getUrlsImages();\n\n  function getObjUrlsImages() {\n    let obj = {};\n    for (const key in props.currentDevice) {\n      if (key.startsWith(\"image\")) {\n        obj = { ...obj, [key]: props.currentDevice[key] };\n      }\n    }\n    return obj;\n  }\n  const objUrlsImages = getObjUrlsImages();\n\n  function onChange(e) {\n    const nextDevice = reallyTheSameDevices.find(\n      (item) =>\n        parseInt(item.memory, 10) === e.target.value &&\n        item.color === props.currentDevice.color\n    );\n    const nextUrl = props.location.pathname.replace(\n      props.match.params.urlName,\n      nextDevice.url\n    );\n    // console.log(nextUrl);\n\n    props.history.push(nextUrl);\n\n    // console.log(\"radio checked\", e.target.value);\n    // setValue(e.target.value);\n  }\n\n  function handleChangeColor(e) {\n    const nextDevice = reallyTheSameDevices.find(\n      (item) =>\n        item.color === e.target.value &&\n        item.memory === props.theReduxStore.currentDevice.memory\n    );\n    const nextUrl = props.location.pathname.replace(\n      props.match.params.urlName,\n      nextDevice.url\n    );\n    props.history.push(nextUrl);\n  }\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        marginLeft: \"5%\",\n        marginTop: \"3%\",\n        alignItems: \"center\",\n      }}\n    >\n      <ImageCarouselDevice\n        objUrlsImages={objUrlsImages}\n        arrUrlsImages={urlsImages}\n      />\n      <div\n        style={{ display: \"flex\", flexDirection: \"column\", marginLeft: \"3%\" }}\n      >\n        <h2>\n          {props.currentDevice.title +\n            props.currentDevice.memory +\n            props.currentDevice.color}\n        </h2>\n        <SelectMemory\n          onChange={onChange}\n          currentMemory={parseInt(props.currentDevice.memory)}\n          availableMemory={arrOfAvailableMemoryDevice}\n        />\n\n        <SelectColor\n          availableColors={availableColors}\n          currentDeviceColor={props.currentDevice.color}\n          onChangeColor={handleChangeColor}\n        />\n\n        <CharacteristicsTable currentDevice={props.currentDevice} />\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    theReduxStore: state,\n    currentDevice: state.currentDevice,\n  };\n}\n\nexport default connect(mapStateToProps)(DevicePage);\n"]},"metadata":{},"sourceType":"module"}