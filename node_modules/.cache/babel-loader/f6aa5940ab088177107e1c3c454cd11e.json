{"ast":null,"code":"import * as types from \"./actionsTypes\";\nimport { getCart, addItem, deleteItem, updateCartApi, cleanCartApi } from \"../../api/cartApi\";\nexport function loadCartSuccess(cart) {\n  return {\n    type: types.LOAD_CART_SUCCESS,\n    cart\n  };\n}\nexport function addItemToCartSuccess(item) {\n  return {\n    type: types.ADD_ITEM_TO_CART,\n    item\n  };\n}\nexport function deleteItemFromCartSuccess(item) {\n  return {\n    type: types.DELETE_ITEM_FROM_CART,\n    item\n  };\n}\nexport function updateCartSuccess(updatedCart) {\n  return {\n    type: types.UPDATE_CART_SUCCESS,\n    updatedCart\n  };\n}\nexport function cleanCartSuccess(currentCart) {\n  return {\n    type: types.CLEAN_CART_SUCCESS,\n    currentCart\n  };\n}\nexport function addItemToCart(item) {\n  return function (dispatch) {\n    return addItem(item).then(addedItem => dispatch(addItemToCartSuccess(addedItem))).catch(error => console.error(error));\n  };\n}\nexport function loadCart() {\n  return function (dispatch) {\n    return getCart().then(cart => {\n      dispatch(loadCartSuccess(cart));\n    }).catch(error => console.error(error));\n  };\n}\nexport function deleteItemFromCart(item) {\n  return dispatch => {\n    dispatch(deleteItemFromCartSuccess(item));\n    return deleteItem(item);\n  };\n}\nexport function updateCart(updatedCart) {\n  return function (dispatch) {\n    dispatch(updateCartSuccess(updatedCart));\n    return updatedCart.forEach(item => updateCartApi(item));\n  };\n}\nexport function cleanCart(currentCart) {\n  return function (dispatch) {\n    dispatch(cleanCartSuccess(currentCart));\n    return currentCart.forEach(item => cleanCartApi(item));\n  };\n}","map":{"version":3,"sources":["/home/roman/Downloads/Telegram Desktop/secind_draft/src/redux/actions/cartActions.js"],"names":["types","getCart","addItem","deleteItem","updateCartApi","cleanCartApi","loadCartSuccess","cart","type","LOAD_CART_SUCCESS","addItemToCartSuccess","item","ADD_ITEM_TO_CART","deleteItemFromCartSuccess","DELETE_ITEM_FROM_CART","updateCartSuccess","updatedCart","UPDATE_CART_SUCCESS","cleanCartSuccess","currentCart","CLEAN_CART_SUCCESS","addItemToCart","dispatch","then","addedItem","catch","error","console","loadCart","deleteItemFromCart","updateCart","forEach","cleanCart"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,gBAAvB;AACA,SACEC,OADF,EAEEC,OAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,YALF,QAMO,mBANP;AAQA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAO;AAAEC,IAAAA,IAAI,EAAER,KAAK,CAACS,iBAAd;AAAiCF,IAAAA;AAAjC,GAAP;AACD;AAED,OAAO,SAASG,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC,SAAO;AAAEH,IAAAA,IAAI,EAAER,KAAK,CAACY,gBAAd;AAAgCD,IAAAA;AAAhC,GAAP;AACD;AAED,OAAO,SAASE,yBAAT,CAAmCF,IAAnC,EAAyC;AAC9C,SAAO;AAAEH,IAAAA,IAAI,EAAER,KAAK,CAACc,qBAAd;AAAqCH,IAAAA;AAArC,GAAP;AACD;AAED,OAAO,SAASI,iBAAT,CAA2BC,WAA3B,EAAwC;AAC7C,SAAO;AAAER,IAAAA,IAAI,EAAER,KAAK,CAACiB,mBAAd;AAAmCD,IAAAA;AAAnC,GAAP;AACD;AAED,OAAO,SAASE,gBAAT,CAA0BC,WAA1B,EAAuC;AAC5C,SAAO;AAAEX,IAAAA,IAAI,EAAER,KAAK,CAACoB,kBAAd;AAAkCD,IAAAA;AAAlC,GAAP;AACD;AAED,OAAO,SAASE,aAAT,CAAuBV,IAAvB,EAA6B;AAClC,SAAO,UAAUW,QAAV,EAAoB;AACzB,WAAOpB,OAAO,CAACS,IAAD,CAAP,CACJY,IADI,CACEC,SAAD,IAAeF,QAAQ,CAACZ,oBAAoB,CAACc,SAAD,CAArB,CADxB,EAEJC,KAFI,CAEGC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAFb,CAAP;AAGD,GAJD;AAKD;AAED,OAAO,SAASE,QAAT,GAAoB;AACzB,SAAO,UAAUN,QAAV,EAAoB;AACzB,WAAOrB,OAAO,GACXsB,IADI,CACEhB,IAAD,IAAU;AACde,MAAAA,QAAQ,CAAChB,eAAe,CAACC,IAAD,CAAhB,CAAR;AACD,KAHI,EAIJkB,KAJI,CAIGC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAJb,CAAP;AAKD,GAND;AAOD;AAED,OAAO,SAASG,kBAAT,CAA4BlB,IAA5B,EAAkC;AACvC,SAAQW,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACT,yBAAyB,CAACF,IAAD,CAA1B,CAAR;AACA,WAAOR,UAAU,CAACQ,IAAD,CAAjB;AACD,GAHD;AAID;AAED,OAAO,SAASmB,UAAT,CAAoBd,WAApB,EAAiC;AACtC,SAAO,UAAUM,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACP,iBAAiB,CAACC,WAAD,CAAlB,CAAR;AACA,WAAOA,WAAW,CAACe,OAAZ,CAAqBpB,IAAD,IAAUP,aAAa,CAACO,IAAD,CAA3C,CAAP;AACD,GAHD;AAID;AAED,OAAO,SAASqB,SAAT,CAAmBb,WAAnB,EAAgC;AACrC,SAAO,UAAUG,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACJ,gBAAgB,CAACC,WAAD,CAAjB,CAAR;AACA,WAAOA,WAAW,CAACY,OAAZ,CAAqBpB,IAAD,IAAUN,YAAY,CAACM,IAAD,CAA1C,CAAP;AACD,GAHD;AAID","sourcesContent":["import * as types from \"./actionsTypes\";\nimport {\n  getCart,\n  addItem,\n  deleteItem,\n  updateCartApi,\n  cleanCartApi,\n} from \"../../api/cartApi\";\n\nexport function loadCartSuccess(cart) {\n  return { type: types.LOAD_CART_SUCCESS, cart };\n}\n\nexport function addItemToCartSuccess(item) {\n  return { type: types.ADD_ITEM_TO_CART, item };\n}\n\nexport function deleteItemFromCartSuccess(item) {\n  return { type: types.DELETE_ITEM_FROM_CART, item };\n}\n\nexport function updateCartSuccess(updatedCart) {\n  return { type: types.UPDATE_CART_SUCCESS, updatedCart };\n}\n\nexport function cleanCartSuccess(currentCart) {\n  return { type: types.CLEAN_CART_SUCCESS, currentCart };\n}\n\nexport function addItemToCart(item) {\n  return function (dispatch) {\n    return addItem(item)\n      .then((addedItem) => dispatch(addItemToCartSuccess(addedItem)))\n      .catch((error) => console.error(error));\n  };\n}\n\nexport function loadCart() {\n  return function (dispatch) {\n    return getCart()\n      .then((cart) => {\n        dispatch(loadCartSuccess(cart));\n      })\n      .catch((error) => console.error(error));\n  };\n}\n\nexport function deleteItemFromCart(item) {\n  return (dispatch) => {\n    dispatch(deleteItemFromCartSuccess(item));\n    return deleteItem(item);\n  };\n}\n\nexport function updateCart(updatedCart) {\n  return function (dispatch) {\n    dispatch(updateCartSuccess(updatedCart));\n    return updatedCart.forEach((item) => updateCartApi(item));\n  };\n}\n\nexport function cleanCart(currentCart) {\n  return function (dispatch) {\n    dispatch(cleanCartSuccess(currentCart));\n    return currentCart.forEach((item) => cleanCartApi(item));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}